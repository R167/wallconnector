syntax = "proto3";

package com.winstondurand.wallconnector;

import "google/protobuf/descriptor.proto";

option go_package = "github.com/R167/wallconnector";

enum Conversion {
  NONE = 0;

  // Compute the inverse of the value.
  INVERSE = 1;

  // Convert from watt-hours to joules.
  WH_TO_J = 2;
}

message Metric {
    enum Type {
        GAUGE = 0;
        COUNTER = 1;
    }

    string name = 1;
    Type type = 2;
    string help = 3;
    repeated string labels = 4;
    Conversion conversion = 5;

    // Skip this field when generating the prometheus metrics.
    // Note: Even when this is set to true, the field still requires a name.
    bool skip = 20;
}

// An extension to annotate the fields with their prometheus metric name, type, description,
// labels, and any applicable conversions (e.g. F_TO_C).
extend google.protobuf.FieldOptions {
  Metric prometheus = 50000;
}

// Vitals represents the current state of the wallconnector.
//
// Note: Several fields like SessionS, and UptimeS are probably ints, but
// they're it's impossible to say parsing JSON from the API.
//
// See Wall Monitor FAQ for more details:
// https://wallmonitor.app/faq/explain_technical
message Vitals {
    bool contactor_closed = 1 [(prometheus) = {
        name: "contactor_closed_status"
        type: GAUGE
        help: "Whether the contactor is closed."
    }];
    bool vehicle_connected = 2 [(prometheus) = {
        name: "vehicle_connected_status"
        type: GAUGE
        help: "Whether a vehicle is connected."
    }];
    double session_s = 3 [(prometheus) = {
        name: "session_seconds_total"
        type: COUNTER
        help: "The duration of the current session."
    }];
    double grid_v = 4 [(prometheus) = {
        name: "grid_voltage"
        type: GAUGE
        help: "The voltage of the grid."
    }];
    double grid_hz = 5 [(prometheus) = {
        name: "grid_period_seconds"
        type: GAUGE
        help: "The frequency of the grid."
        conversion: INVERSE
    }];
    double vehicle_current_a = 6 [(prometheus) = {
        name: "vehicle_current_amperes"
        type: GAUGE
        help: "The current being drawn by the vehicle."
    }];
    double currentA_a = 7 [(prometheus) = {
        name: "wall_amperes"
        type: GAUGE
        help: "The current being drawn at the wall."
        labels: "phase:A"
    }];
    double currentB_a = 8 [(prometheus) = {
        name: "wall_amperes"
        type: GAUGE
        help: "The current being drawn at the wall."
        labels: "phase:B"
    }];
    double currentC_a = 9 [(prometheus) = {
        name: "wall_amperes"
        type: GAUGE
        help: "The current being drawn at the wall."
        labels: "phase:C"
    }];
    double currentN_a = 10 [(prometheus) = {
        name: "wall_amperes"
        type: GAUGE
        help: "The current being drawn at the wall."
        labels: "phase:N"
    }];
    double voltageA_v = 11 [(prometheus) = {
        name: "wall_volts"
        type: GAUGE
        help: "The voltage at the wall."
        labels: "phase:A"
    }];
    double voltageB_v = 12 [(prometheus) = {
        name: "wall_volts"
        type: GAUGE
        help: "The voltage at the wall."
        labels: "phase:B"
    }];
    double voltageC_v = 13 [(prometheus) = {
        name: "wall_volts"
        type: GAUGE
        help: "The voltage at the wall."
        labels: "phase:C"
    }];
    double relay_coil_v = 14 [(prometheus) = {
        name: "relay_coil_volts"
        type: GAUGE
        help: "The voltage at the relay coil."
    }];
    double pcba_temp_c = 15 [(prometheus) = {
        name: "temp_celsius"
        type: GAUGE
        help: "Temperature at various locations."
        labels: "location:pcba"
    }];
    double handle_temp_c = 16 [(prometheus) = {
        name: "temp_celsius"
        type: GAUGE
        help: "Temperature at various locations."
        labels: "location:handle"
    }];
    double mcu_temp_c = 17 [(prometheus) = {
        name: "temp_celsius"
        type: GAUGE
        help: "Temperature at various locations."
        labels: "location:mcu"
    }];
    double uptime_s = 18 [(prometheus) = {
        name: "uptime_seconds_total"
        type: COUNTER
        help: "The duration the device has been running."
    }];
    double input_thermopile_uv = 19 [(prometheus) = {
        name: "input_thermopile_uv"
        type: GAUGE
        help: "Input thermopile"
    }];
    double prox_v = 20 [(prometheus) = {
        name: "proximity_sensor_volts"
        type: GAUGE
        help: "Proximity sensor voltage"
    }];
    double pilot_high_v = 21 [(prometheus) = {
        name: "pilot_high_volts"
        type: GAUGE
        help: "Pilot high voltage"
    }];
    double pilot_low_v = 22 [(prometheus) = {
        name: "pilot_low_volts"
        type: GAUGE
        help: "Pilot low voltage"
    }];
    double session_energy_wh = 23 [(prometheus) = {
        name: "session_energy_joules_total"
        type: COUNTER
        help: "The energy consumed during the current session."
        conversion: WH_TO_J
    }];
    int32 config_status = 24 [(prometheus) = {
        name: "config_status"
        type: GAUGE
        help: "The status of the configuration."
    }];
    int32 evse_state = 25 [(prometheus) = {
        name: "evse_state"
        type: GAUGE
        help: "The state of the EVSE."
    }];

    repeated int32 current_alerts = 26 [(prometheus) = {
        name: "current_alerts"
        skip: true
    }];
}

// Lifetime represents the lifetime stats of the wallconnector.
//
// See Wall Monitor FAQ for more details:
// https://wallmonitor.app/faq/explain_lifetime
message Lifetime {
    int32 contactor_cycles = 1 [(prometheus) = {
        name: "contactor_cycles_total"
        type: COUNTER
        help: "This is the total number of times your Wall Connector has turned power on/off to your vehicle."
    }];
    int32 contactor_cycles_loaded = 2 [(prometheus) = {
        name: "contactor_cycles_loaded_total"
        type: COUNTER
        help: "This is the total number of times your Wall Connector has turned power on/off to your vehicle while the vehicle was charging."
    }];
    int32 alert_count = 3 [(prometheus) = {
        name: "alert_count_total"
        type: COUNTER
        help: "This is the total number of alerts that have occurred on your Wall Connector."
    }];
    int32 thermal_foldback_count = 4 [(prometheus) = {
        name: "thermal_foldback_count_total"
        type: COUNTER
        help: "This is the total number of times your Wall Connector has reduced the current to your vehicle due to high temperatures."
    }];
    double avg_startup_time = 5 [(prometheus) = {
        name: "avg_startup_time_seconds"
        type: GAUGE
        help: "Unknown."
    }];
    int32 charge_starts = 6 [(prometheus) = {
        name: "charge_starts_total"
        type: COUNTER
        help: "This is the total number of times your vehicle has started charging."
    }];
    int64 energy_wh = 7 [(prometheus) = {
        name: "energy_joules_total"
        type: COUNTER
        help: "This is the total amount of energy your vehicle has consumed."
        conversion: WH_TO_J
    }];
    int32 connector_cycles = 8 [(prometheus) = {
        name: "connector_cycles_total"
        type: COUNTER
        help: "This is the total number of times your vehicle has been plugged in."
    }];
    int64 uptime_s = 9 [(prometheus) = {
        name: "uptime_seconds_total"
        type: COUNTER
        help: "This is the total amount of time your Wall Connector has been powered on."
    }];
    int32 charge_time_s = 10 [(prometheus) = {
        name: "charge_time_seconds_total"
        type: COUNTER
        help: "This is the total amount of time your vehicle has been charging."
    }];
}

// Version represents the version info of the wallconnector.
message Version {
    string firmware_version = 1;
    string part_number = 2;
    string serial_number = 3;
}

// {
//     "wifi_signal_strength": 74,
//     "wifi_rssi": -53,
//     "wifi_snr": 43,
//     "wifi_connected": true,
//     "internet": true,
//     "wifi_infra_ip": "10.10.1.217",
//     "wifi_ssid": "<base64 data>",
//     "wifi_mac": "98:ED:5C:B8:2C:17"
// }

// Wifi represents the wifi info of the wallconnector.
message Wifi {
    int32 wifi_signal_strength = 1 [(prometheus) = {
        name: "signal_strength"
        type: GAUGE
        help: "The signal strength of the wifi."
    }];
    int32 wifi_rssi = 2 [(prometheus) = {
        name: "rssi"
        type: GAUGE
        help: "The RSSI of the wifi."
    }];
    int32 wifi_snr = 3 [(prometheus) = {
        name: "snr"
        type: GAUGE
        help: "The SNR of the wifi."
    }];
    bool wifi_connected = 4 [(prometheus) = {
        name: "connection_status"
        type: GAUGE
        help: "Whether the wifi is connected."
        labels: "connection:wifi"
    }];
    bool internet = 5 [(prometheus) = {
        name: "internet_status"
        type: GAUGE
        help: "Does the device have internet connectivity."
        labels: "connection:internet"
    }];
}
