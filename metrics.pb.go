// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: metrics.proto

package wallconnector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Conversion int32

const (
	Conversion_NONE Conversion = 0
	// Compute the inverse of the value.
	Conversion_INVERSE Conversion = 1
	// Convert from watt-hours to joules.
	Conversion_WH_TO_J Conversion = 2
)

// Enum value maps for Conversion.
var (
	Conversion_name = map[int32]string{
		0: "NONE",
		1: "INVERSE",
		2: "WH_TO_J",
	}
	Conversion_value = map[string]int32{
		"NONE":    0,
		"INVERSE": 1,
		"WH_TO_J": 2,
	}
)

func (x Conversion) Enum() *Conversion {
	p := new(Conversion)
	*p = x
	return p
}

func (x Conversion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Conversion) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_proto_enumTypes[0].Descriptor()
}

func (Conversion) Type() protoreflect.EnumType {
	return &file_metrics_proto_enumTypes[0]
}

func (x Conversion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Conversion.Descriptor instead.
func (Conversion) EnumDescriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

type Metric_Type int32

const (
	Metric_GAUGE   Metric_Type = 0
	Metric_COUNTER Metric_Type = 1
)

// Enum value maps for Metric_Type.
var (
	Metric_Type_name = map[int32]string{
		0: "GAUGE",
		1: "COUNTER",
	}
	Metric_Type_value = map[string]int32{
		"GAUGE":   0,
		"COUNTER": 1,
	}
)

func (x Metric_Type) Enum() *Metric_Type {
	p := new(Metric_Type)
	*p = x
	return p
}

func (x Metric_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_metrics_proto_enumTypes[1].Descriptor()
}

func (Metric_Type) Type() protoreflect.EnumType {
	return &file_metrics_proto_enumTypes[1]
}

func (x Metric_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metric_Type.Descriptor instead.
func (Metric_Type) EnumDescriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0, 0}
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       Metric_Type `protobuf:"varint,2,opt,name=type,proto3,enum=com.winstondurand.wallconnector.Metric_Type" json:"type,omitempty"`
	Help       string      `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	Labels     []string    `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Conversion Conversion  `protobuf:"varint,5,opt,name=conversion,proto3,enum=com.winstondurand.wallconnector.Conversion" json:"conversion,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetType() Metric_Type {
	if x != nil {
		return x.Type
	}
	return Metric_GAUGE
}

func (x *Metric) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *Metric) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metric) GetConversion() Conversion {
	if x != nil {
		return x.Conversion
	}
	return Conversion_NONE
}

// Vitals represents the current state of the wallconnector.
//
// Note: Several fields like SessionS, and UptimeS are probably ints, but
// they're it's impossible to say parsing JSON from the API.
//
// See Wall Monitor FAQ for more details:
// https://wallmonitor.app/faq/explain_technical
type Vitals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactorClosed   bool    `protobuf:"varint,1,opt,name=contactor_closed,json=contactorClosed,proto3" json:"contactor_closed,omitempty"`
	VehicleConnected  bool    `protobuf:"varint,2,opt,name=vehicle_connected,json=vehicleConnected,proto3" json:"vehicle_connected,omitempty"`
	SessionS          float64 `protobuf:"fixed64,3,opt,name=session_s,json=sessionS,proto3" json:"session_s,omitempty"`
	GridV             float64 `protobuf:"fixed64,4,opt,name=grid_v,json=gridV,proto3" json:"grid_v,omitempty"`
	GridHz            float64 `protobuf:"fixed64,5,opt,name=grid_hz,json=gridHz,proto3" json:"grid_hz,omitempty"`
	VehicleCurrentA   float64 `protobuf:"fixed64,6,opt,name=vehicle_current_a,json=vehicleCurrentA,proto3" json:"vehicle_current_a,omitempty"`
	CurrentAA         float64 `protobuf:"fixed64,7,opt,name=currentA_a,json=currentAA,proto3" json:"currentA_a,omitempty"`
	CurrentBA         float64 `protobuf:"fixed64,8,opt,name=currentB_a,json=currentBA,proto3" json:"currentB_a,omitempty"`
	CurrentCA         float64 `protobuf:"fixed64,9,opt,name=currentC_a,json=currentCA,proto3" json:"currentC_a,omitempty"`
	CurrentNA         float64 `protobuf:"fixed64,10,opt,name=currentN_a,json=currentNA,proto3" json:"currentN_a,omitempty"`
	VoltageAV         float64 `protobuf:"fixed64,11,opt,name=voltageA_v,json=voltageAV,proto3" json:"voltageA_v,omitempty"`
	VoltageBV         float64 `protobuf:"fixed64,12,opt,name=voltageB_v,json=voltageBV,proto3" json:"voltageB_v,omitempty"`
	VoltageCV         float64 `protobuf:"fixed64,13,opt,name=voltageC_v,json=voltageCV,proto3" json:"voltageC_v,omitempty"`
	RelayCoilV        float64 `protobuf:"fixed64,14,opt,name=relay_coil_v,json=relayCoilV,proto3" json:"relay_coil_v,omitempty"`
	PcbaTempC         float64 `protobuf:"fixed64,15,opt,name=pcba_temp_c,json=pcbaTempC,proto3" json:"pcba_temp_c,omitempty"`
	HandleTempC       float64 `protobuf:"fixed64,16,opt,name=handle_temp_c,json=handleTempC,proto3" json:"handle_temp_c,omitempty"`
	McuTempC          float64 `protobuf:"fixed64,17,opt,name=mcu_temp_c,json=mcuTempC,proto3" json:"mcu_temp_c,omitempty"`
	UptimeS           float64 `protobuf:"fixed64,18,opt,name=uptime_s,json=uptimeS,proto3" json:"uptime_s,omitempty"`
	InputThermopileUv float64 `protobuf:"fixed64,19,opt,name=input_thermopile_uv,json=inputThermopileUv,proto3" json:"input_thermopile_uv,omitempty"`
	ProxV             float64 `protobuf:"fixed64,20,opt,name=prox_v,json=proxV,proto3" json:"prox_v,omitempty"`
	PilotHighV        float64 `protobuf:"fixed64,21,opt,name=pilot_high_v,json=pilotHighV,proto3" json:"pilot_high_v,omitempty"`
	PilotLowV         float64 `protobuf:"fixed64,22,opt,name=pilot_low_v,json=pilotLowV,proto3" json:"pilot_low_v,omitempty"`
	SessionEnergyWh   float64 `protobuf:"fixed64,23,opt,name=session_energy_wh,json=sessionEnergyWh,proto3" json:"session_energy_wh,omitempty"`
	ConfigStatus      int32   `protobuf:"varint,24,opt,name=config_status,json=configStatus,proto3" json:"config_status,omitempty"`
	EvseState         int32   `protobuf:"varint,25,opt,name=evse_state,json=evseState,proto3" json:"evse_state,omitempty"`
	CurrentAlerts     []int32 `protobuf:"varint,26,rep,packed,name=current_alerts,json=currentAlerts,proto3" json:"current_alerts,omitempty"`
}

func (x *Vitals) Reset() {
	*x = Vitals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vitals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vitals) ProtoMessage() {}

func (x *Vitals) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vitals.ProtoReflect.Descriptor instead.
func (*Vitals) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *Vitals) GetContactorClosed() bool {
	if x != nil {
		return x.ContactorClosed
	}
	return false
}

func (x *Vitals) GetVehicleConnected() bool {
	if x != nil {
		return x.VehicleConnected
	}
	return false
}

func (x *Vitals) GetSessionS() float64 {
	if x != nil {
		return x.SessionS
	}
	return 0
}

func (x *Vitals) GetGridV() float64 {
	if x != nil {
		return x.GridV
	}
	return 0
}

func (x *Vitals) GetGridHz() float64 {
	if x != nil {
		return x.GridHz
	}
	return 0
}

func (x *Vitals) GetVehicleCurrentA() float64 {
	if x != nil {
		return x.VehicleCurrentA
	}
	return 0
}

func (x *Vitals) GetCurrentAA() float64 {
	if x != nil {
		return x.CurrentAA
	}
	return 0
}

func (x *Vitals) GetCurrentBA() float64 {
	if x != nil {
		return x.CurrentBA
	}
	return 0
}

func (x *Vitals) GetCurrentCA() float64 {
	if x != nil {
		return x.CurrentCA
	}
	return 0
}

func (x *Vitals) GetCurrentNA() float64 {
	if x != nil {
		return x.CurrentNA
	}
	return 0
}

func (x *Vitals) GetVoltageAV() float64 {
	if x != nil {
		return x.VoltageAV
	}
	return 0
}

func (x *Vitals) GetVoltageBV() float64 {
	if x != nil {
		return x.VoltageBV
	}
	return 0
}

func (x *Vitals) GetVoltageCV() float64 {
	if x != nil {
		return x.VoltageCV
	}
	return 0
}

func (x *Vitals) GetRelayCoilV() float64 {
	if x != nil {
		return x.RelayCoilV
	}
	return 0
}

func (x *Vitals) GetPcbaTempC() float64 {
	if x != nil {
		return x.PcbaTempC
	}
	return 0
}

func (x *Vitals) GetHandleTempC() float64 {
	if x != nil {
		return x.HandleTempC
	}
	return 0
}

func (x *Vitals) GetMcuTempC() float64 {
	if x != nil {
		return x.McuTempC
	}
	return 0
}

func (x *Vitals) GetUptimeS() float64 {
	if x != nil {
		return x.UptimeS
	}
	return 0
}

func (x *Vitals) GetInputThermopileUv() float64 {
	if x != nil {
		return x.InputThermopileUv
	}
	return 0
}

func (x *Vitals) GetProxV() float64 {
	if x != nil {
		return x.ProxV
	}
	return 0
}

func (x *Vitals) GetPilotHighV() float64 {
	if x != nil {
		return x.PilotHighV
	}
	return 0
}

func (x *Vitals) GetPilotLowV() float64 {
	if x != nil {
		return x.PilotLowV
	}
	return 0
}

func (x *Vitals) GetSessionEnergyWh() float64 {
	if x != nil {
		return x.SessionEnergyWh
	}
	return 0
}

func (x *Vitals) GetConfigStatus() int32 {
	if x != nil {
		return x.ConfigStatus
	}
	return 0
}

func (x *Vitals) GetEvseState() int32 {
	if x != nil {
		return x.EvseState
	}
	return 0
}

func (x *Vitals) GetCurrentAlerts() []int32 {
	if x != nil {
		return x.CurrentAlerts
	}
	return nil
}

// Lifetime represents the lifetime stats of the wallconnector.
//
// See Wall Monitor FAQ for more details:
// https://wallmonitor.app/faq/explain_lifetime
type Lifetime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactorCycles       int32   `protobuf:"varint,1,opt,name=contactor_cycles,json=contactorCycles,proto3" json:"contactor_cycles,omitempty"`
	ContactorCyclesLoaded int32   `protobuf:"varint,2,opt,name=contactor_cycles_loaded,json=contactorCyclesLoaded,proto3" json:"contactor_cycles_loaded,omitempty"`
	AlertCount            int32   `protobuf:"varint,3,opt,name=alert_count,json=alertCount,proto3" json:"alert_count,omitempty"`
	ThermalFoldbackCount  int32   `protobuf:"varint,4,opt,name=thermal_foldback_count,json=thermalFoldbackCount,proto3" json:"thermal_foldback_count,omitempty"`
	AvgStartupTime        float64 `protobuf:"fixed64,5,opt,name=avg_startup_time,json=avgStartupTime,proto3" json:"avg_startup_time,omitempty"`
	ChargeStarts          int32   `protobuf:"varint,6,opt,name=charge_starts,json=chargeStarts,proto3" json:"charge_starts,omitempty"`
	EnergyWh              int64   `protobuf:"varint,7,opt,name=energy_wh,json=energyWh,proto3" json:"energy_wh,omitempty"`
	ConnectorCycles       int32   `protobuf:"varint,8,opt,name=connector_cycles,json=connectorCycles,proto3" json:"connector_cycles,omitempty"`
	UptimeS               int64   `protobuf:"varint,9,opt,name=uptime_s,json=uptimeS,proto3" json:"uptime_s,omitempty"`
	ChargeTimeS           int32   `protobuf:"varint,10,opt,name=charge_time_s,json=chargeTimeS,proto3" json:"charge_time_s,omitempty"`
}

func (x *Lifetime) Reset() {
	*x = Lifetime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lifetime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lifetime) ProtoMessage() {}

func (x *Lifetime) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lifetime.ProtoReflect.Descriptor instead.
func (*Lifetime) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *Lifetime) GetContactorCycles() int32 {
	if x != nil {
		return x.ContactorCycles
	}
	return 0
}

func (x *Lifetime) GetContactorCyclesLoaded() int32 {
	if x != nil {
		return x.ContactorCyclesLoaded
	}
	return 0
}

func (x *Lifetime) GetAlertCount() int32 {
	if x != nil {
		return x.AlertCount
	}
	return 0
}

func (x *Lifetime) GetThermalFoldbackCount() int32 {
	if x != nil {
		return x.ThermalFoldbackCount
	}
	return 0
}

func (x *Lifetime) GetAvgStartupTime() float64 {
	if x != nil {
		return x.AvgStartupTime
	}
	return 0
}

func (x *Lifetime) GetChargeStarts() int32 {
	if x != nil {
		return x.ChargeStarts
	}
	return 0
}

func (x *Lifetime) GetEnergyWh() int64 {
	if x != nil {
		return x.EnergyWh
	}
	return 0
}

func (x *Lifetime) GetConnectorCycles() int32 {
	if x != nil {
		return x.ConnectorCycles
	}
	return 0
}

func (x *Lifetime) GetUptimeS() int64 {
	if x != nil {
		return x.UptimeS
	}
	return 0
}

func (x *Lifetime) GetChargeTimeS() int32 {
	if x != nil {
		return x.ChargeTimeS
	}
	return 0
}

// Version represents the version info of the wallconnector.
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareVersion string `protobuf:"bytes,1,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	PartNumber      string `protobuf:"bytes,2,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	SerialNumber    string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *Version) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Version) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Version) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

var file_metrics_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Metric)(nil),
		Field:         50000,
		Name:          "com.winstondurand.wallconnector.prometheus",
		Tag:           "bytes,50000,opt,name=prometheus",
		Filename:      "metrics.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional com.winstondurand.wallconnector.Metric prometheus = 50000;
	E_Prometheus = &file_metrics_proto_extTypes[0]
)

var File_metrics_proto protoreflect.FileDescriptor

var file_metrics_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x6e, 0x64, 0x75, 0x72, 0x61,
	0x6e, 0x64, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x73, 0x74, 0x6f, 0x6e, 0x64, 0x75, 0x72,
	0x61, 0x6e, 0x64, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0xdb, 0x12, 0x0a,
	0x06, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x2e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x11, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3f,
	0x82, 0xb5, 0x18, 0x3b, 0x0a, 0x18, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1f,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x2e, 0x52,
	0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x60, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x10, 0x01, 0x1a, 0x24, 0x54, 0x68, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x12, 0x43, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x0a, 0x0c, 0x67, 0x72, 0x69, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x54, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x69, 0x64,
	0x2e, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64, 0x56, 0x12, 0x50, 0x0a, 0x07, 0x67, 0x72, 0x69, 0x64,
	0x5f, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x0a,
	0x13, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x69, 0x64, 0x2e,
	0x28, 0x01, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x48, 0x7a, 0x12, 0x72, 0x0a, 0x11, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x46, 0x82, 0xb5, 0x18, 0x42, 0x0a, 0x17, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x65, 0x73, 0x1a, 0x27, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x20, 0x62, 0x79,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x52, 0x0f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x12, 0x60,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x5f, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x1a, 0x24, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x20,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x22, 0x07, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x3a, 0x41, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x41,
	0x12, 0x60, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x5f, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x1a, 0x24, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x22, 0x07,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x42, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x41, 0x12, 0x60, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x5f, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x42, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x0a, 0x0c, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x1a, 0x24, 0x54, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x72,
	0x61, 0x77, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e,
	0x22, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x43, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x41, 0x12, 0x60, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x5f, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x0a, 0x0c,
	0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x1a, 0x24, 0x54, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
	0x64, 0x72, 0x61, 0x77, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c,
	0x6c, 0x2e, 0x22, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x4e, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x41, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x41, 0x5f, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f,
	0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73, 0x1a, 0x18, 0x54, 0x68,
	0x65, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x22, 0x07, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x41, 0x52,
	0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x56, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x5f, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x33,
	0x82, 0xb5, 0x18, 0x2f, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73,
	0x1a, 0x18, 0x54, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x22, 0x07, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x3a, 0x42, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x42, 0x56, 0x12, 0x52,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x5f, 0x76, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x74, 0x73, 0x1a, 0x18, 0x54, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x22, 0x07,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x43, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x43, 0x56, 0x12, 0x58, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6c,
	0x5f, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x0a, 0x10,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73,
	0x1a, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x20, 0x63, 0x6f, 0x69, 0x6c, 0x2e,
	0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x69, 0x6c, 0x56, 0x12, 0x64, 0x0a, 0x0b,
	0x70, 0x63, 0x62, 0x61, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x1a, 0x21, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x61, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x22, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x70, 0x63, 0x62, 0x61, 0x52, 0x09, 0x70, 0x63, 0x62, 0x61, 0x54, 0x65, 0x6d,
	0x70, 0x43, 0x12, 0x6a, 0x0a, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42, 0x46, 0x82, 0xb5, 0x18, 0x42, 0x0a,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x1a, 0x21, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x61, 0x74, 0x20, 0x76, 0x61,
	0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x22, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x12, 0x61,
	0x0a, 0x0a, 0x6d, 0x63, 0x75, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x1a, 0x21, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x61, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x22, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x63, 0x75, 0x52, 0x08, 0x6d, 0x63, 0x75, 0x54, 0x65, 0x6d, 0x70,
	0x43, 0x12, 0x62, 0x0a, 0x08, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x0a, 0x14, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10,
	0x01, 0x1a, 0x29, 0x54, 0x68, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62,
	0x65, 0x65, 0x6e, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x07, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x5b, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x76, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x76, 0x1a, 0x10, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x69, 0x6c, 0x65, 0x52,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x70, 0x69, 0x6c, 0x65,
	0x55, 0x76, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x76, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73,
	0x1a, 0x18, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x20, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x56, 0x12, 0x4c, 0x0a, 0x0c, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x76, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x0a, 0x10, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73, 0x1a,
	0x12, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x20, 0x68, 0x69, 0x67, 0x68, 0x20, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x48, 0x69, 0x67, 0x68, 0x56, 0x12,
	0x48, 0x0a, 0x0b, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x0a, 0x0f, 0x70, 0x69, 0x6c, 0x6f,
	0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73, 0x1a, 0x11, 0x50, 0x69, 0x6c,
	0x6f, 0x74, 0x20, 0x6c, 0x6f, 0x77, 0x20, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x77, 0x56, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x77, 0x68, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x0a, 0x1b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6a, 0x6f, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x2f, 0x54, 0x68, 0x65, 0x20,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x20,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x28, 0x02, 0x52, 0x0f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x68, 0x12, 0x5a,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x76,
	0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28,
	0x82, 0xb5, 0x18, 0x24, 0x0a, 0x0a, 0x65, 0x76, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x45, 0x56, 0x53, 0x45, 0x2e, 0x52, 0x09, 0x65, 0x76, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0xf3, 0x0b, 0x0a, 0x08, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x7e, 0x82, 0xb5, 0x18, 0x7a, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x10, 0x01, 0x1a, 0x5e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x20,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x2f, 0x6f, 0x66,
	0x66, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x2e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0xa5, 0x01, 0x82, 0xb5, 0x18, 0xa0, 0x01, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x7d,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x2f, 0x6f, 0x66, 0x66, 0x20, 0x74, 0x6f,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x20,
	0x77, 0x61, 0x73, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x4c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x68, 0x82, 0xb5, 0x18, 0x64,
	0x0a, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x4d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x79, 0x6f, 0x75, 0x72, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0xd5, 0x01, 0x0a, 0x16, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x9e, 0x01, 0x82, 0xb5, 0x18, 0x99, 0x01, 0x0a, 0x1c, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x77, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75,
	0x72, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x68, 0x69, 0x67, 0x68, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x52, 0x14, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x0a, 0x18, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x1a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x52, 0x0e, 0x61, 0x76,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x61, 0x82, 0xb5, 0x18, 0x5d, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10,
	0x01, 0x1a, 0x44, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x77, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x5c, 0x82, 0xb5, 0x18, 0x58, 0x0a, 0x13,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6a, 0x6f, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x3d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x64, 0x2e, 0x28, 0x02, 0x52, 0x08, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x68,
	0x12, 0x8e, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x63, 0x82, 0xb5, 0x18,
	0x5f, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10, 0x01, 0x1a, 0x43, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x62, 0x65, 0x65, 0x6e, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x2e,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x67, 0x82, 0xb5, 0x18, 0x63, 0x0a, 0x14, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x10, 0x01, 0x1a, 0x49, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x57, 0x61, 0x6c, 0x6c, 0x20, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,
	0x6e, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x2e, 0x52, 0x07, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x63,
	0x82, 0xb5, 0x18, 0x5f, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x10,
	0x01, 0x1a, 0x40, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x22, 0x7a, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2a, 0x30, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x48, 0x5f, 0x54, 0x4f, 0x5f, 0x4a, 0x10, 0x02, 0x3a, 0x68,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x73, 0x74, 0x6f,
	0x6e, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x31, 0x36, 0x37, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_metrics_proto_rawDescOnce sync.Once
	file_metrics_proto_rawDescData = file_metrics_proto_rawDesc
)

func file_metrics_proto_rawDescGZIP() []byte {
	file_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_metrics_proto_rawDescData)
	})
	return file_metrics_proto_rawDescData
}

var file_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_metrics_proto_goTypes = []interface{}{
	(Conversion)(0),                   // 0: com.winstondurand.wallconnector.Conversion
	(Metric_Type)(0),                  // 1: com.winstondurand.wallconnector.Metric.Type
	(*Metric)(nil),                    // 2: com.winstondurand.wallconnector.Metric
	(*Vitals)(nil),                    // 3: com.winstondurand.wallconnector.Vitals
	(*Lifetime)(nil),                  // 4: com.winstondurand.wallconnector.Lifetime
	(*Version)(nil),                   // 5: com.winstondurand.wallconnector.Version
	(*descriptorpb.FieldOptions)(nil), // 6: google.protobuf.FieldOptions
}
var file_metrics_proto_depIdxs = []int32{
	1, // 0: com.winstondurand.wallconnector.Metric.type:type_name -> com.winstondurand.wallconnector.Metric.Type
	0, // 1: com.winstondurand.wallconnector.Metric.conversion:type_name -> com.winstondurand.wallconnector.Conversion
	6, // 2: com.winstondurand.wallconnector.prometheus:extendee -> google.protobuf.FieldOptions
	2, // 3: com.winstondurand.wallconnector.prometheus:type_name -> com.winstondurand.wallconnector.Metric
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	3, // [3:4] is the sub-list for extension type_name
	2, // [2:3] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_metrics_proto_init() }
func file_metrics_proto_init() {
	if File_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vitals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lifetime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metrics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_proto_depIdxs,
		EnumInfos:         file_metrics_proto_enumTypes,
		MessageInfos:      file_metrics_proto_msgTypes,
		ExtensionInfos:    file_metrics_proto_extTypes,
	}.Build()
	File_metrics_proto = out.File
	file_metrics_proto_rawDesc = nil
	file_metrics_proto_goTypes = nil
	file_metrics_proto_depIdxs = nil
}
